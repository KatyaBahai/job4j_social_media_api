package ru.job4j.socialmediaapi.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import ru.job4j.socialmediaapi.dto.FileDto;
import ru.job4j.socialmediaapi.mapper.MultipartFileDtoMapper;
import ru.job4j.socialmediaapi.model.Post;
import ru.job4j.socialmediaapi.service.post.PostService;

import java.net.URI;
import java.util.List;

@Tag(name = "PostController", description = "PostController management APIs")
@Validated
@AllArgsConstructor
@RestController
@RequestMapping("/api/post")
public class PostController {
    private final PostService postService;

    @Operation(
            summary = "Retrieve a Post by postId",
            description = "Get a Post by specifying its userId. The response is Post object with postId",
            tags = {"Post", "get"})
    @ApiResponses({
            @ApiResponse(responseCode = "200", content = {@Content(schema = @Schema(implementation = Post.class), mediaType = "application/json")}),
            @ApiResponse(responseCode = "400", content = {@Content(schema = @Schema())})})
    @GetMapping("/{postId}")
    public ResponseEntity<Post> get(@NotNull @PathVariable("postId") Long postId) {
        return postService.findById(postId)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @Operation(
            summary = "Save a new Post",
            description = "Save a Post object along with one or more files. The id is autogenerated by the db. The response is a saved Post object with postId",
            tags = {"Post", "post"})
    @ApiResponses({
            @ApiResponse(responseCode = "200", content = {@Content(schema = @Schema(implementation = Post.class), mediaType = "application/json")}),
            @ApiResponse(responseCode = "400", content = {@Content(schema = @Schema())})})
    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<Post> save(@Valid @RequestPart("post") Post post,
                                     @RequestPart("multipartFiles") List<MultipartFile> multipartFiles) {
        List<FileDto> dtoFiles = MultipartFileDtoMapper.convertMultiparttoDto(multipartFiles);
        postService.createPostWithFiles(post, dtoFiles);
        URI uri = ServletUriComponentsBuilder
                .fromCurrentRequest()
                .path("/{id}")
                .buildAndExpand(post.getId())
                .toUri();
        return ResponseEntity.status(HttpStatus.CREATED)
                .location(uri)
                .body(post);
    }

    @Operation(
            summary = "Update a whole post object by postId",
            description = "Update a whole post object by specifying its postId. The response body is void",
            tags = {"Post", "put"})
    @ApiResponses({
            @ApiResponse(responseCode = "200", content = {@Content(schema = @Schema(implementation = Post.class), mediaType = "application/json")}),
            @ApiResponse(responseCode = "400", content = {@Content(schema = @Schema())})})
    @PutMapping(value = "/{postId}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<Void> update(@Valid @RequestPart Post post,
                                       @NotNull @PathVariable("postId") long postId,
                                       @RequestPart List<MultipartFile> multipartFiles) {
        List<FileDto> dtoFiles = MultipartFileDtoMapper.convertMultiparttoDto(multipartFiles);

        if (postService.updatePost(postId, post, dtoFiles).isPresent()) {
            return ResponseEntity.ok().build();
        }
        return ResponseEntity.notFound().build();
    }

    @Operation(
            summary = "Update a heading and a description of a post by postId",
            description = "Update a heading and a description of a post by specifying its postId. The response body is void",
            tags = {"Post", "patch"})
    @ApiResponses({
            @ApiResponse(responseCode = "200", content = {@Content(schema = @Schema(implementation = Post.class), mediaType = "application/json")}),
            @ApiResponse(responseCode = "400", content = {@Content(schema = @Schema())})})
    @PatchMapping(value = "/{postId}")
    public ResponseEntity<Void> editHeadingAndDescription(@Size(max = 200) @RequestParam String heading,
                                                          @NotBlank @RequestParam String description,
                                                          @PathVariable("postId") long postId) {
        if (postService.findById(postId).isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        postService.editHeadingAndDescription(heading, description, postId);
        return ResponseEntity.ok().build();
    }

    @Operation(
            summary = "Delete an existing post by postId",
            description = "Delete a Post object by specifying its postId.",
            tags = {"Post", "delete"})
    @ApiResponses({
            @ApiResponse(responseCode = "200", content = {@Content(schema = @Schema(implementation = Post.class), mediaType = "application/json")}),
            @ApiResponse(responseCode = "400", content = {@Content(schema = @Schema())})})
    @DeleteMapping("/{postId}")
    @PreAuthorize("hasRole('ADMIN') or @postSecurityService.isAuthor(#postId, authentication.name)")
    public ResponseEntity<Void> removeById(@NotNull @PathVariable long postId) {
        if (!postService.deleteById(postId)) {
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.notFound().build();
    }
}
